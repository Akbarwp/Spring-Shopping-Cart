{
	"info": {
		"_postman_id": "bb6c9d35-118e-40ad-afd7-4cc0a7ab79db",
		"name": "Spring Boot Shopping Cart",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24331877"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Login",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"Admin123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "testAuthLoginSuccess",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"Admin123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 18 May 2025 09:25:00 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Login success!\",\n    \"data\": {\n        \"id\": 1,\n        \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbkBnbWFpbC5jb20iLCJpZCI6MSwicm9sZXMiOltdLCJpYXQiOjE3NDc1NjAzMDAsImV4cCI6MTc0NzU2MzkwMH0.b12dCxbfTvL3MSUtNN0Ot71apepbx05ZY4gzpvTVL4BFaqgJCPklXAnW1281ABvx_V2JSNSFdyPMOrlYcC5nTA\"\n    }\n}"
						},
						{
							"name": "testAuthLoginWrongPassword",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"testLogin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 18 May 2025 09:25:36 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Bad credentials\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"admin admin\",\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"Admin123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "testCreateUserSuccess",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"admin admin\",\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"Admin123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 18 May 2025 09:23:15 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Create user success!\",\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"admin admin\",\n        \"email\": \"admin@gmail.com\",\n        \"orders\": null,\n        \"cart\": null\n    }\n}"
						},
						{
							"name": "testCreateUserFailed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"admin admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 18 May 2025 09:23:43 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-05-18T16:23:43.372+07:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"java.lang.IllegalArgumentException: rawPassword cannot be null\\r\\n\\tat org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(BCryptPasswordEncoder.java:107)\\r\\n\\tat com.spring.springshoppingcart.service.user.UserService.lambda$2(UserService.java:55)\\r\\n\\tat java.base/java.util.Optional.map(Optional.java:260)\\r\\n\\tat com.spring.springshoppingcart.service.user.UserService.createUser(UserService.java:51)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)\\r\\n\\tat com.spring.springshoppingcart.service.user.UserService$$SpringCGLIB$$0.createUser(<generated>)\\r\\n\\tat com.spring.springshoppingcart.controller.UserController.createUser(UserController.java:49)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)\\r\\n\\tat org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)\\r\\n\\tat org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)\\r\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)\\r\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat com.spring.springshoppingcart.security.jwt.AuthTokenFilter.doFilterInternal(AuthTokenFilter.java:51)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)\\r\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)\\r\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)\\r\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)\\r\\n\\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)\\r\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\r\\n\\tat org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)\\r\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\r\\n\\tat org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)\\r\\n\\tat org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)\\r\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)\\r\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"rawPassword cannot be null\",\n    \"path\": \"/api/v1/users/create\"\n}"
						},
						{
							"name": "testCreateUserAlreadyExist",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"admin admin\",\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"Admin123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"create"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 18 May 2025 09:24:01 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"admin@gmail.com already exists!\",\n    \"data\": null\n}"
						}
					]
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Create Category",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Computer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/categories/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "testCreateCategorySuccess",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Computer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/categories/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"categories",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:14:43 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Create category success!\",\n    \"data\": {\n        \"id\": 2,\n        \"name\": \"Computer\",\n        \"createdAt\": \"2025-05-07T11:14:43.073+07:00\",\n        \"updatedAt\": \"2025-05-07T11:14:43.074+07:00\"\n    }\n}"
						},
						{
							"name": "testCreateCategoryDuplicate",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Computer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/categories/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"categories",
										"create"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:15:37 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Computer already exists!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Get Category by Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/categories/category/{category_id}/get",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"category",
								"{category_id}",
								"get"
							]
						}
					},
					"response": [
						{
							"name": "testGetCategorySuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/categories/category/2/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"categories",
										"category",
										"2",
										"get"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:19:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get category success!\",\n    \"data\": {\n        \"id\": 2,\n        \"name\": \"Computer\",\n        \"createdAt\": \"2025-05-07T11:14:43.000+07:00\",\n        \"updatedAt\": \"2025-05-07T11:14:43.000+07:00\"\n    }\n}"
						},
						{
							"name": "testGetCategoryNotFound",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/categories/category/3/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"categories",
										"category",
										"3",
										"get"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:20:12 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Category not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Get Category by Name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/categories/{category_name}/get",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"{category_name}",
								"get"
							]
						}
					},
					"response": [
						{
							"name": "tesGetCategorySuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/categories/computer/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"categories",
										"computer",
										"get"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:21:40 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get category success!\",\n    \"data\": {\n        \"id\": 2,\n        \"name\": \"Computer\",\n        \"createdAt\": \"2025-05-07T11:14:43.000+07:00\",\n        \"updatedAt\": \"2025-05-07T11:14:43.000+07:00\"\n    }\n}"
						},
						{
							"name": "testGetCategoryNotFound",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/categories/test/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"categories",
										"test",
										"get"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:22:21 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get category success!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Update Category",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Laptop\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/categories/category/{category_id}/update",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"category",
								"{category_id}",
								"update"
							]
						}
					},
					"response": [
						{
							"name": "testUpdateCategorySuccess",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Laptop\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/categories/category/2/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"categories",
										"category",
										"2",
										"update"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:23:40 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Update category success!\",\n    \"data\": {\n        \"id\": 2,\n        \"name\": \"Laptop\",\n        \"createdAt\": \"2025-05-07T11:14:43.000+07:00\",\n        \"updatedAt\": \"2025-05-07T11:23:40.501+07:00\"\n    }\n}"
						},
						{
							"name": "testUpdateCategoryNotFound",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Laptop\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/categories/category/3/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"categories",
										"category",
										"3",
										"update"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:24:20 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Category not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Delete Category",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/categories/category/{category_id}/delete",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"category",
								"{category_id}",
								"delete"
							]
						}
					},
					"response": [
						{
							"name": "testDeleteCategorySuccess",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/categories/category/2/delete",
									"host": [
										"{{host}}"
									],
									"path": [
										"categories",
										"category",
										"2",
										"delete"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:25:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Delete category success!\",\n    \"data\": null\n}"
						},
						{
							"name": "testDeleteCategoryNotFound",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/categories/category/2/delete",
									"host": [
										"{{host}}"
									],
									"path": [
										"categories",
										"category",
										"2",
										"delete"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:26:14 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Category not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Get All Category",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/categories/all",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"all"
							]
						}
					},
					"response": [
						{
							"name": "testGetAllCategorySuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/categories/all",
									"host": [
										"{{host}}"
									],
									"path": [
										"categories",
										"all"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:27:32 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get all categories success!\",\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Smartphone\",\n            \"createdAt\": \"2025-05-01T16:39:27.000+07:00\",\n            \"updatedAt\": \"2025-05-01T16:39:27.000+07:00\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Computer\",\n            \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n            \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Create Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbkBnbWFpbC5jb20iLCJpZCI6MSwicm9sZXMiOlsiUk9MRV9BRE1JTiJdLCJpYXQiOjE3NDc1NjA5OTIsImV4cCI6MTc0NzU2NDU5Mn0.OlvZoIcDACVESg92unoegndrQgMfF-fIWafOV1qXZ1S6EVqEyzvMCE3rFpDSztlIeeowaluCudk-26sFbyR_dw",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Lenovo Legion 5\",\r\n    \"brand\": \"Lenovo\",\r\n    \"price\": 20000000.00,\r\n    \"inventory\": 23,\r\n    \"description\": \"Gaming laptop\",\r\n    \"category\": \"Computer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/products/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "testCreateProductSuccess",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lenovo Legion 5\",\r\n    \"brand\": \"Lenovo\",\r\n    \"price\": 20000000.00,\r\n    \"inventory\": 23,\r\n    \"description\": \"Gaming laptop\",\r\n    \"category\": \"Computer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/products/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:34:21 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Create product success!\",\n    \"data\": {\n        \"id\": 3,\n        \"name\": \"Lenovo Legion 5\",\n        \"brand\": \"Lenovo\",\n        \"price\": 20000000,\n        \"inventory\": 23,\n        \"description\": \"Gaming laptop\",\n        \"category\": {\n            \"id\": 3,\n            \"name\": \"Computer\",\n            \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n            \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n        },\n        \"images\": []\n    }\n}"
						},
						{
							"name": "testCreateProductFailed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lenovo Legion 5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/products/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 04:58:03 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cannot invoke \\\"com.spring.springshoppingcart.model.Category.getName()\\\" because the return value of \\\"com.spring.springshoppingcart.request.AddProductRequest.getCategory()\\\" is null\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Update Product",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Lenovo Legion 5 Pro\",\r\n    \"brand\": \"Lenovo\",\r\n    \"price\": 25000000.00,\r\n    \"inventory\": 33,\r\n    \"description\": \"Gaming laptop Super\",\r\n    \"category\": \"Computer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/products/product/{category_id}/update",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"product",
								"{category_id}",
								"update"
							]
						}
					},
					"response": [
						{
							"name": "testUpdateProductSuccess",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lenovo Legion 5 Pro\",\r\n    \"brand\": \"Lenovo\",\r\n    \"price\": 25000000.00,\r\n    \"inventory\": 33,\r\n    \"description\": \"Gaming laptop Super\",\r\n    \"category\": \"Computer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/products/product/3/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"product",
										"3",
										"update"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:00:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Update product success!\",\n    \"data\": {\n        \"id\": 3,\n        \"name\": \"Lenovo Legion 5 Pro\",\n        \"brand\": \"Lenovo\",\n        \"price\": 25000000,\n        \"inventory\": 33,\n        \"description\": \"Gaming laptop Super\",\n        \"category\": {\n            \"id\": 3,\n            \"name\": \"Computer\",\n            \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n            \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n        },\n        \"images\": []\n    }\n}"
						},
						{
							"name": "testUpdateProductFailed",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lenovo Legion 5 Pro\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/products/product/3/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"product",
										"3",
										"update"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:00:38 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-05-07T12:00:38.540+07:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"java.lang.NullPointerException: Cannot invoke \\\"com.spring.springshoppingcart.model.Category.getName()\\\" because the return value of \\\"com.spring.springshoppingcart.request.UpdateProductRequest.getCategory()\\\" is null\\r\\n\\tat com.spring.springshoppingcart.service.product.ProductService.updateExistingProduct(ProductService.java:86)\\r\\n\\tat com.spring.springshoppingcart.service.product.ProductService.lambda$2(ProductService.java:74)\\r\\n\\tat java.base/java.util.Optional.map(Optional.java:260)\\r\\n\\tat com.spring.springshoppingcart.service.product.ProductService.updateProductById(ProductService.java:74)\\r\\n\\tat com.spring.springshoppingcart.controller.ProductController.updateProduct(ProductController.java:72)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Cannot invoke \\\"com.spring.springshoppingcart.model.Category.getName()\\\" because the return value of \\\"com.spring.springshoppingcart.request.UpdateProductRequest.getCategory()\\\" is null\",\n    \"path\": \"/api/v1/products/product/3/update\"\n}"
						},
						{
							"name": "testUpdateProductNotFound",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lenovo Legion 5 Pro\",\r\n    \"brand\": \"Lenovo\",\r\n    \"price\": 25000000.00,\r\n    \"inventory\": 33,\r\n    \"description\": \"Gaming laptop Super\",\r\n    \"category\": \"Computer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/products/product/5/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"product",
										"5",
										"update"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:01:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Product not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Get All Product",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/products/all",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"all"
							]
						}
					},
					"response": [
						{
							"name": "testGetAllProductSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/all",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"all"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:02:01 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get all products success!\",\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Samsung S25 Ultra\",\n            \"brand\": \"Samsung\",\n            \"price\": 25000000,\n            \"inventory\": 100,\n            \"description\": \"Lorem ipsum dolor\",\n            \"category\": {\n                \"id\": 1,\n                \"name\": \"Smartphone\",\n                \"createdAt\": \"2025-05-01T16:39:27.000+07:00\",\n                \"updatedAt\": \"2025-05-01T16:39:27.000+07:00\"\n            },\n            \"images\": []\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Iphone 16 Plus\",\n            \"brand\": \"Iphone\",\n            \"price\": 20000000,\n            \"inventory\": 150,\n            \"description\": \"Lorem ipsum dolor\",\n            \"category\": {\n                \"id\": 1,\n                \"name\": \"Smartphone\",\n                \"createdAt\": \"2025-05-01T16:39:27.000+07:00\",\n                \"updatedAt\": \"2025-05-01T16:39:27.000+07:00\"\n            },\n            \"images\": []\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Lenovo Legion 5 Pro\",\n            \"brand\": \"Lenovo\",\n            \"price\": 25000000,\n            \"inventory\": 33,\n            \"description\": \"Gaming laptop Super\",\n            \"category\": {\n                \"id\": 3,\n                \"name\": \"Computer\",\n                \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n                \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n            },\n            \"images\": []\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Product by Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/products/product/{product_id}/get",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"product",
								"{product_id}",
								"get"
							]
						}
					},
					"response": [
						{
							"name": "testGetProductSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/product/3/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"product",
										"3",
										"get"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:40:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get product success!\",\n    \"data\": {\n        \"id\": 3,\n        \"name\": \"Lenovo Legion 5 Pro\",\n        \"brand\": \"Lenovo\",\n        \"price\": 25000000,\n        \"inventory\": 33,\n        \"description\": \"Gaming laptop Super\",\n        \"category\": {\n            \"id\": 3,\n            \"name\": \"Computer\",\n            \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n            \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n        },\n        \"images\": []\n    }\n}"
						},
						{
							"name": "testGetProductNotFound",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/product/7/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"product",
										"7",
										"get"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:41:39 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Product not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Get Product by Name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/products/name/{product_name}/get",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"name",
								"{product_name}",
								"get"
							]
						}
					},
					"response": [
						{
							"name": "testGetProductSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/name/Lenovo Legion 5/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"name",
										"Lenovo Legion 5",
										"get"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:32:39 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get products success!\",\n    \"data\": [\n        {\n            \"id\": 5,\n            \"name\": \"Lenovo Legion 5\",\n            \"brand\": \"Lenovo\",\n            \"price\": 20000000,\n            \"inventory\": 23,\n            \"description\": \"Gaming laptop\",\n            \"category\": {\n                \"id\": 3,\n                \"name\": \"Computer\",\n                \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n                \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n            },\n            \"images\": []\n        }\n    ]\n}"
						},
						{
							"name": "testGetProductNotFound",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/name/tes/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"name",
										"tes",
										"get"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:33:56 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Products not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Get Product by Brand",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/products/by/brand?brand=Lenovo",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"by",
								"brand"
							],
							"query": [
								{
									"key": "brand",
									"value": "Lenovo"
								}
							]
						}
					},
					"response": [
						{
							"name": "testGetProductSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/by/brand?brand=Lenovo",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"by",
										"brand"
									],
									"query": [
										{
											"key": "brand",
											"value": "Lenovo"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:35:29 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get products success!\",\n    \"data\": [\n        {\n            \"id\": 3,\n            \"name\": \"Lenovo Legion 5 Pro\",\n            \"brand\": \"Lenovo\",\n            \"price\": 25000000,\n            \"inventory\": 33,\n            \"description\": \"Gaming laptop Super\",\n            \"category\": {\n                \"id\": 3,\n                \"name\": \"Computer\",\n                \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n                \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n            },\n            \"images\": []\n        },\n        {\n            \"id\": 5,\n            \"name\": \"Lenovo Legion 5\",\n            \"brand\": \"Lenovo\",\n            \"price\": 20000000,\n            \"inventory\": 23,\n            \"description\": \"Gaming laptop\",\n            \"category\": {\n                \"id\": 3,\n                \"name\": \"Computer\",\n                \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n                \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n            },\n            \"images\": []\n        }\n    ]\n}"
						},
						{
							"name": "testGetProductNotFound",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/by/brand?brand=test",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"by",
										"brand"
									],
									"query": [
										{
											"key": "brand",
											"value": "test"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:35:50 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Products not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Get Product by Category",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/products/category/{category_name}/get",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"category",
								"{category_name}",
								"get"
							]
						}
					},
					"response": [
						{
							"name": "testGetProductSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/category/Computer/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"category",
										"Computer",
										"get"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:36:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get products success!\",\n    \"data\": [\n        {\n            \"id\": 3,\n            \"name\": \"Lenovo Legion 5 Pro\",\n            \"brand\": \"Lenovo\",\n            \"price\": 25000000,\n            \"inventory\": 33,\n            \"description\": \"Gaming laptop Super\",\n            \"category\": {\n                \"id\": 3,\n                \"name\": \"Computer\",\n                \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n                \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n            },\n            \"images\": []\n        },\n        {\n            \"id\": 5,\n            \"name\": \"Lenovo Legion 5\",\n            \"brand\": \"Lenovo\",\n            \"price\": 20000000,\n            \"inventory\": 23,\n            \"description\": \"Gaming laptop\",\n            \"category\": {\n                \"id\": 3,\n                \"name\": \"Computer\",\n                \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n                \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n            },\n            \"images\": []\n        }\n    ]\n}"
						},
						{
							"name": "testGetProductNotFound",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/category/test/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"category",
										"test",
										"get"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:37:16 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Products not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Get Product by Brand & Name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/products/by/brand-and-name?brandName=Lenovo&productName=Lenovo Legion 5",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"by",
								"brand-and-name"
							],
							"query": [
								{
									"key": "brandName",
									"value": "Lenovo"
								},
								{
									"key": "productName",
									"value": "Lenovo Legion 5"
								}
							]
						}
					},
					"response": [
						{
							"name": "testGetProductSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/by/brand-and-name?brandName=Lenovo&productName=Lenovo Legion 5",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"by",
										"brand-and-name"
									],
									"query": [
										{
											"key": "brandName",
											"value": "Lenovo"
										},
										{
											"key": "productName",
											"value": "Lenovo Legion 5"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:26:03 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get products success!\",\n    \"data\": [\n        {\n            \"id\": 5,\n            \"name\": \"Lenovo Legion 5\",\n            \"brand\": \"Lenovo\",\n            \"price\": 20000000,\n            \"inventory\": 23,\n            \"description\": \"Gaming laptop\",\n            \"category\": {\n                \"id\": 3,\n                \"name\": \"Computer\",\n                \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n                \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n            },\n            \"images\": []\n        }\n    ]\n}"
						},
						{
							"name": "testGetProductNotFound",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/by/brand-and-name?brandName=Lenovo&productName=Lenovo Legion",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"by",
										"brand-and-name"
									],
									"query": [
										{
											"key": "brandName",
											"value": "Lenovo"
										},
										{
											"key": "productName",
											"value": "Lenovo Legion"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:27:34 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Products not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Get Product by Category & Brand",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/products/by/category-and-brand?category=Computer&brand=Lenovo",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"by",
								"category-and-brand"
							],
							"query": [
								{
									"key": "category",
									"value": "Computer"
								},
								{
									"key": "brand",
									"value": "Lenovo"
								}
							]
						}
					},
					"response": [
						{
							"name": "testGetProductSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/by/category-and-brand?category=Computer&brand=Lenovo",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"by",
										"category-and-brand"
									],
									"query": [
										{
											"key": "category",
											"value": "Computer"
										},
										{
											"key": "brand",
											"value": "Lenovo"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:33:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get products success!\",\n    \"data\": [\n        {\n            \"id\": 3,\n            \"name\": \"Lenovo Legion 5 Pro\",\n            \"brand\": \"Lenovo\",\n            \"price\": 25000000,\n            \"inventory\": 33,\n            \"description\": \"Gaming laptop Super\",\n            \"category\": {\n                \"id\": 3,\n                \"name\": \"Computer\",\n                \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n                \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n            },\n            \"images\": []\n        },\n        {\n            \"id\": 5,\n            \"name\": \"Lenovo Legion 5\",\n            \"brand\": \"Lenovo\",\n            \"price\": 20000000,\n            \"inventory\": 23,\n            \"description\": \"Gaming laptop\",\n            \"category\": {\n                \"id\": 3,\n                \"name\": \"Computer\",\n                \"createdAt\": \"2025-05-07T11:27:28.000+07:00\",\n                \"updatedAt\": \"2025-05-07T11:27:28.000+07:00\"\n            },\n            \"images\": []\n        }\n    ]\n}"
						},
						{
							"name": "testGetProductNotFound",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/by/category-and-brand?category=Computer&brand=test",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"by",
										"category-and-brand"
									],
									"query": [
										{
											"key": "category",
											"value": "Computer"
										},
										{
											"key": "brand",
											"value": "test"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:30:23 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Products not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Count Product",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/products/count/by/brand-and-name?brandName=Lenovo&productName=Lenovo Legion 5",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"count",
								"by",
								"brand-and-name"
							],
							"query": [
								{
									"key": "brandName",
									"value": "Lenovo"
								},
								{
									"key": "productName",
									"value": "Lenovo Legion 5"
								}
							]
						}
					},
					"response": [
						{
							"name": "testCountProductSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/count/by/brand-and-name?brandName=Lenovo&productName=Lenovo Legion 5",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"count",
										"by",
										"brand-and-name"
									],
									"query": [
										{
											"key": "brandName",
											"value": "Lenovo"
										},
										{
											"key": "productName",
											"value": "Lenovo Legion 5"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:38:36 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Count products success!\",\n    \"data\": 1\n}"
						}
					]
				},
				{
					"name": "Delete Product",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/products/product/{product_id}/delete",
							"host": [
								"{{host}}"
							],
							"path": [
								"products",
								"product",
								"{product_id}",
								"delete"
							]
						}
					},
					"response": [
						{
							"name": "testDeleteProductNotFound",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/products/product/6/delete",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"product",
										"6",
										"delete"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:49:06 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Product not found!\",\n    \"data\": null\n}"
						},
						{
							"name": "testDeleteProductSuccess",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/products/product/6/delete",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										"product",
										"6",
										"delete"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 06:08:15 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Delete product success!\",\n    \"data\": null\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Image",
			"item": [
				{
					"name": "Uploud Image",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "productId",
									"value": "3",
									"type": "text"
								},
								{
									"key": "files",
									"type": "file",
									"src": [
										"/C:/Users/akbar/Downloads/Documents/Wallpaper/Nadeshiko-Kagamihara-anime-girl-minimal.jpg",
										"/C:/Users/akbar/Downloads/Documents/Wallpaper/FB_IMG_1676221576498.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{host}}/images/uploud",
							"host": [
								"{{host}}"
							],
							"path": [
								"images",
								"uploud"
							]
						}
					},
					"response": [
						{
							"name": "testUploudImageSuccess",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"type": "file",
											"src": [
												"/C:/Users/akbar/Downloads/Documents/Wallpaper/Nadeshiko-Kagamihara-anime-girl-minimal.jpg",
												"/C:/Users/akbar/Downloads/Documents/Wallpaper/FB_IMG_1676221576498.jpg"
											]
										},
										{
											"key": "productId",
											"value": "3",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/images/uploud",
									"host": [
										"{{host}}"
									],
									"path": [
										"images",
										"uploud"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 06:31:08 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Uploud image success!\",\n    \"data\": [\n        {\n            \"id\": 3,\n            \"fileName\": \"Nadeshiko-Kagamihara-anime-girl-minimal.jpg\",\n            \"downloadUrl\": \"/api/v1/images/image/download/3\"\n        },\n        {\n            \"id\": 4,\n            \"fileName\": \"FB_IMG_1676221576498.jpg\",\n            \"downloadUrl\": \"/api/v1/images/image/download/4\"\n        }\n    ]\n}"
						},
						{
							"name": "testUploudImageNotFound",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"type": "file",
											"src": [
												"/C:/Users/akbar/Downloads/Documents/Wallpaper/Nadeshiko-Kagamihara-anime-girl-minimal.jpg",
												"/C:/Users/akbar/Downloads/Documents/Wallpaper/FB_IMG_1676221576498.jpg"
											]
										},
										{
											"key": "productId",
											"value": "4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/images/uploud",
									"host": [
										"{{host}}"
									],
									"path": [
										"images",
										"uploud"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 06:31:29 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Uploud image failed!\",\n    \"data\": \"Product not found!\"\n}"
						},
						{
							"name": "testUploudImageFileTooLarge",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"type": "file",
											"src": "/C:/Users/akbar/Downloads/Documents/Wallpaper/72379562_p1.png"
										},
										{
											"key": "productId",
											"value": "3",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/images/uploud",
									"host": [
										"{{host}}"
									],
									"path": [
										"images",
										"uploud"
									]
								}
							},
							"status": "Request Entity Too Large",
							"code": 413,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 06:32:28 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": null
						},
						{
							"name": "testUploudImageFailed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "productId",
											"value": "3",
											"type": "text"
										},
										{
											"key": "files",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{host}}/images/uploud",
									"host": [
										"{{host}}"
									],
									"path": [
										"images",
										"uploud"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 06:33:15 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Uploud image failed!\",\n    \"data\": \"could not execute statement [Column 'file_type' cannot be null] [insert into images (created_at,download_url,file_name,file_type,image,product_id,updated_at) values (?,?,?,?,?,?,?)]; SQL [insert into images (created_at,download_url,file_name,file_type,image,product_id,updated_at) values (?,?,?,?,?,?,?)]; constraint [null]\"\n}"
						}
					]
				},
				{
					"name": "Download Image",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/images/image/download/{imageId}",
							"host": [
								"{{host}}"
							],
							"path": [
								"images",
								"image",
								"download",
								"{imageId}"
							]
						}
					},
					"response": [
						{
							"name": "testDownloadImageFailed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/images/image/download/5",
									"host": [
										"{{host}}"
									],
									"path": [
										"images",
										"image",
										"download",
										"5"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 06:35:44 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-05-07T13:35:44.518+07:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"com.spring.springshoppingcart.exception.ResourceException: Image not found with id: 5\\r\\n\\tat com.spring.springshoppingcart.service.image.ImageService.lambda$0(ImageService.java:36)\\r\\n\\tat java.base/java.util.Optional.orElseThrow(Optional.java:403)\\r\\n\\tat com.spring.springshoppingcart.service.image.ImageService.getImageById(ImageService.java:36)\\r\\n\\tat com.spring.springshoppingcart.controller.ImageController.downloadImage(ImageController.java:56)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Image not found with id: 5\",\n    \"path\": \"/api/v1/images/image/download/5\"\n}"
						}
					]
				},
				{
					"name": "Update Image",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/akbar/Downloads/Documents/Wallpaper/FB_IMG_1676260110478.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/images/image/{image_id}/update",
							"host": [
								"{{host}}"
							],
							"path": [
								"images",
								"image",
								"{image_id}",
								"update"
							]
						}
					},
					"response": [
						{
							"name": "testUpdateImageSucces",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/akbar/Downloads/Documents/Wallpaper/FB_IMG_1676260110478.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/images/image/4/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"images",
										"image",
										"4",
										"update"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 06:37:54 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Update image success!\",\n    \"data\": null\n}"
						},
						{
							"name": "testUpdateImageNotFound",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/akbar/Downloads/Documents/Wallpaper/FB_IMG_1676260110478.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/images/image/5/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"images",
										"image",
										"5",
										"update"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 06:38:16 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Image not found with id: 5\",\n    \"data\": null\n}"
						},
						{
							"name": "testUpdateImageFailed",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{host}}/images/image/3/update",
									"host": [
										"{{host}}"
									],
									"path": [
										"images",
										"image",
										"3",
										"update"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 06:38:32 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-05-07T13:38:32.895+07:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"org.springframework.dao.DataIntegrityViolationException: could not execute statement [Column 'file_type' cannot be null] [update images set created_at=?,download_url=?,file_name=?,file_type=?,image=?,product_id=?,updated_at=? where id=?]; SQL [update images set created_at=?,download_url=?,file_name=?,file_type=?,image=?,product_id=?,updated_at=? where id=?]; constraint [null]\\r\\n\\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:294)\\r\\n\\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:256)\\r\\n\\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)\\r\\n\\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\\r\\n\\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795)\\r\\n\\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)\\r\\n\\tat jdk.proxy20/jdk.proxy20.$Proxy244.save(Unknown Source)\\r\\n\\tat com.spring.springshoppingcart.service.image.ImageService.updateImage(ImageService.java:79)\\r\\n\\tat com.spring.springshoppingcart.controller.ImageController.updateImage(ImageController.java:69)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement [Column 'file_type' cannot be null] [update images set created_at=?,download_url=?,file_name=?,file_type=?,image=?,product_id=?,updated_at=? where id=?]\\r\\n\\tat org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:62)\\r\\n\\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)\\r\\n\\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)\\r\\n\\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\\r\\n\\tat org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134)\\r\\n\\tat org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55)\\r\\n\\tat org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55)\\r\\n\\tat org.hibernate.persister.entity.mutation.UpdateCoordinatorStandard.doStaticUpdate(UpdateCoordinatorStandard.java:781)\\r\\n\\tat org.hibernate.persister.entity.mutation.UpdateCoordinatorStandard.performUpdate(UpdateCoordinatorStandard.java:328)\\r\\n\\tat org.hibernate.persister.entity.mutation.UpdateCoordinatorStandard.update(UpdateCoordinatorStandard.java:245)\\r\\n\\tat org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:169)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511)\\r\\n\\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414)\\r\\n\\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41)\\r\\n\\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)\\r\\n\\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429)\\r\\n\\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491)\\r\\n\\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354)\\r\\n\\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978)\\r\\n\\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439)\\r\\n\\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169)\\r\\n\\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267)\\r\\n\\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\\r\\n\\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\\r\\n\\t... 64 more\\r\\nCaused by: java.sql.SQLIntegrityConstraintViolationException: Column 'file_type' cannot be null\\r\\n\\tat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:109)\\r\\n\\tat com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:988)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1166)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1101)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1467)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:1084)\\r\\n\\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\\r\\n\\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\\r\\n\\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)\\r\\n\\t... 85 more\\r\\n\",\n    \"message\": \"could not execute statement [Column 'file_type' cannot be null] [update images set created_at=?,download_url=?,file_name=?,file_type=?,image=?,product_id=?,updated_at=? where id=?]; SQL [update images set created_at=?,download_url=?,file_name=?,file_type=?,image=?,product_id=?,updated_at=? where id=?]; constraint [null]\",\n    \"path\": \"/api/v1/images/image/3/update\"\n}"
						}
					]
				},
				{
					"name": "Delete Image",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/images/image/{image_id}/delete",
							"host": [
								"{{host}}"
							],
							"path": [
								"images",
								"image",
								"{image_id}",
								"delete"
							]
						}
					},
					"response": [
						{
							"name": "testDeleteImageSuccess",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/images/image/4/delete",
									"host": [
										"{{host}}"
									],
									"path": [
										"images",
										"image",
										"4",
										"delete"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 06:39:40 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Delete image success!\",\n    \"data\": null\n}"
						},
						{
							"name": "testDeleteImageNotFound",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/images/image/5/delete",
									"host": [
										"{{host}}"
									],
									"path": [
										"images",
										"image",
										"5",
										"delete"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 06:39:57 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Image not found with id: 5\",\n    \"data\": null\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Get Cart",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/carts/{cart_id}/get",
							"host": [
								"{{host}}"
							],
							"path": [
								"carts",
								"{cart_id}",
								"get"
							]
						}
					},
					"response": [
						{
							"name": "testGetCartSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/carts/1/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										"1",
										"get"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 12:55:07 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get cart success!\",\n    \"data\": {\n        \"id\": 1,\n        \"totalAmount\": 62000000,\n        \"createdAt\": \"2025-05-13T14:42:52.000+07:00\",\n        \"updatedAt\": \"2025-05-13T14:42:52.000+07:00\",\n        \"cartItems\": [\n            {\n                \"id\": 1,\n                \"quantity\": 2,\n                \"unitPrice\": 20000000,\n                \"totalPrice\": 40000000,\n                \"createdAt\": \"2025-05-13T14:42:52.000+07:00\",\n                \"updatedAt\": \"2025-05-13T14:42:52.000+07:00\",\n                \"product\": {\n                    \"id\": 20,\n                    \"name\": \"Lenovo Legion 5\",\n                    \"brand\": \"Lenovo\",\n                    \"price\": 20000000,\n                    \"inventory\": 23,\n                    \"description\": \"Gaming laptop\",\n                    \"createdAt\": \"2025-05-07T14:42:52.000+07:00\",\n                    \"updatedAt\": \"2025-05-07T14:42:52.000+07:00\",\n                    \"category\": {\n                        \"id\": 5,\n                        \"name\": \"Computer\",\n                        \"createdAt\": \"2025-05-07T14:42:52.000+07:00\",\n                        \"updatedAt\": \"2025-05-07T14:42:52.000+07:00\"\n                    },\n                    \"images\": []\n                }\n            },\n            {\n                \"id\": 2,\n                \"quantity\": 1,\n                \"unitPrice\": 22000000,\n                \"totalPrice\": 22000000,\n                \"createdAt\": \"2025-05-13T14:42:52.000+07:00\",\n                \"updatedAt\": \"2025-05-13T14:42:52.000+07:00\",\n                \"product\": {\n                    \"id\": 27,\n                    \"name\": \"Lenovo Legion 5i\",\n                    \"brand\": \"Lenovo\",\n                    \"price\": 22000000,\n                    \"inventory\": 23,\n                    \"description\": \"Gaming laptop\",\n                    \"createdAt\": \"2025-05-13T19:47:16.000+07:00\",\n                    \"updatedAt\": \"2025-05-13T19:47:16.000+07:00\",\n                    \"category\": {\n                        \"id\": 5,\n                        \"name\": \"Computer\",\n                        \"createdAt\": \"2025-05-07T14:42:52.000+07:00\",\n                        \"updatedAt\": \"2025-05-07T14:42:52.000+07:00\"\n                    },\n                    \"images\": []\n                }\n            }\n        ]\n    }\n}"
						},
						{
							"name": "testGetCartNotFound",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/carts/2/get",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										"2",
										"get"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 12:57:03 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cart not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Get Total Price Cart",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/carts/{cart_id}/total-price",
							"host": [
								"{{host}}"
							],
							"path": [
								"carts",
								"{cart_id}",
								"total-price"
							]
						}
					},
					"response": [
						{
							"name": "testGetTotalPriceCartSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/carts/1/total-price",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										"1",
										"total-price"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 12:58:42 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Total Price\",\n    \"data\": 62000000\n}"
						},
						{
							"name": "testGetTotalPriceCartNotFound",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/carts/2/total-price",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										"2",
										"total-price"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:00:08 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cart not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Clear Cart",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/carts/{cart_id}/clear",
							"host": [
								"{{host}}"
							],
							"path": [
								"carts",
								"{cart_id}",
								"clear"
							]
						}
					},
					"response": [
						{
							"name": "testClearCartSuccess",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/carts/1/clear",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										"1",
										"clear"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:02:23 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Clear cart success!\",\n    \"data\": null\n}"
						},
						{
							"name": "testClearCartNotFound",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/carts/2/clear",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										"2",
										"clear"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:02:07 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cart not found!\",\n    \"data\": null\n}"
						}
					]
				}
			]
		},
		{
			"name": "Cart Item",
			"item": [
				{
					"name": "Add Item",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/cartItems/item/add?cartId=1&productId=6&quantity=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"cartItems",
								"item",
								"add"
							],
							"query": [
								{
									"key": "cartId",
									"value": "1"
								},
								{
									"key": "productId",
									"value": "6"
								},
								{
									"key": "quantity",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "testAddItemToCartIdSuccess",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/cartItems/item/add?cartId=1&productId=25&quantity=2",
									"host": [
										"{{host}}"
									],
									"path": [
										"cartItems",
										"item",
										"add"
									],
									"query": [
										{
											"key": "cartId",
											"value": "1"
										},
										{
											"key": "productId",
											"value": "25"
										},
										{
											"key": "quantity",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:10:32 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Add item to cart success!\",\n    \"data\": null\n}"
						},
						{
							"name": "testAddItemToCartIdFailed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/cartItems/item/add?cartId=1&productId=2&quantity=2",
									"host": [
										"{{host}}"
									],
									"path": [
										"cartItems",
										"item",
										"add"
									],
									"query": [
										{
											"key": "cartId",
											"value": "1"
										},
										{
											"key": "productId",
											"value": "2"
										},
										{
											"key": "quantity",
											"value": "2"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:11:34 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Product not found!\",\n    \"data\": null\n}"
						},
						{
							"name": "testAddItemToNewCartSuccess",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/cartItems/item/add?cartId=&productId=27&quantity=3",
									"host": [
										"{{host}}"
									],
									"path": [
										"cartItems",
										"item",
										"add"
									],
									"query": [
										{
											"key": "cartId",
											"value": ""
										},
										{
											"key": "productId",
											"value": "27"
										},
										{
											"key": "quantity",
											"value": "3"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:20:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Add item to cart success!\",\n    \"data\": null\n}"
						},
						{
							"name": "testAddItemToNewCartFailed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/cartItems/item/add?cartId=&productId=2&quantity=3",
									"host": [
										"{{host}}"
									],
									"path": [
										"cartItems",
										"item",
										"add"
									],
									"query": [
										{
											"key": "cartId",
											"value": ""
										},
										{
											"key": "productId",
											"value": "2"
										},
										{
											"key": "quantity",
											"value": "3"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:21:35 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Product not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Update Item",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{host}}/cartItems/cart/{cart_id}/item/{product_id}/update?quantity=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"cartItems",
								"cart",
								"{cart_id}",
								"item",
								"{product_id}",
								"update"
							],
							"query": [
								{
									"key": "quantity",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "testUpdateQuantityProductSuccess",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/cartItems/cart/2/item/20/update?quantity=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"cartItems",
										"cart",
										"2",
										"item",
										"20",
										"update"
									],
									"query": [
										{
											"key": "quantity",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:27:31 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Update item from cart success!\",\n    \"data\": null\n}"
						},
						{
							"name": "testUpdateQuantityProductFailed",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/cartItems/cart/5/item/20/update?quantity=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"cartItems",
										"cart",
										"5",
										"item",
										"20",
										"update"
									],
									"query": [
										{
											"key": "quantity",
											"value": "1"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:28:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cart not found!\",\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "Remove Item",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/cartItems/cart/{cart_id}/item/{product_id}/remove",
							"host": [
								"{{host}}"
							],
							"path": [
								"cartItems",
								"cart",
								"{cart_id}",
								"item",
								"{product_id}",
								"remove"
							]
						}
					},
					"response": [
						{
							"name": "testRemoveItemFromCartSuccess",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/cartItems/cart/1/item/25/remove",
									"host": [
										"{{host}}"
									],
									"path": [
										"cartItems",
										"cart",
										"1",
										"item",
										"25",
										"remove"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:31:43 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Remove item from cart success!\",\n    \"data\": null\n}"
						},
						{
							"name": "testRemoveItemFromCartItemNotFound",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/cartItems/cart/1/item/2/remove",
									"host": [
										"{{host}}"
									],
									"path": [
										"cartItems",
										"cart",
										"1",
										"item",
										"2",
										"remove"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:32:36 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Item not found!\",\n    \"data\": null\n}"
						},
						{
							"name": "testRemoveItemFromCartNotFound",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/cartItems/cart/5/item/2/remove",
									"host": [
										"{{host}}"
									],
									"path": [
										"cartItems",
										"cart",
										"5",
										"item",
										"2",
										"remove"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 13 May 2025 13:33:01 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cart not found!\",\n    \"data\": null\n}"
						}
					]
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Create Order",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/orders/order?userId=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"orders",
								"order"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "testCreateOrderFailed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/orders/order?userId=2",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"order"
									],
									"query": [
										{
											"key": "userId",
											"value": "2"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 18 May 2025 09:50:51 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-05-18T16:50:51.563+07:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"java.lang.NullPointerException: Cannot invoke \\\"com.spring.springshoppingcart.model.Cart.getUser()\\\" because \\\"cart\\\" is null\\r\\n\\tat com.spring.springshoppingcart.service.order.OrderService.createOrder(OrderService.java:62)\\r\\n\\tat com.spring.springshoppingcart.service.order.OrderService.placeOrder(OrderService.java:47)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)\\r\\n\\tat com.spring.springshoppingcart.service.order.OrderService$$SpringCGLIB$$0.placeOrder(<generated>)\\r\\n\\tat com.spring.springshoppingcart.controller.OrderController.createOrder(OrderController.java:34)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)\\r\\n\\tat org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)\\r\\n\\tat org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)\\r\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)\\r\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat com.spring.springshoppingcart.security.jwt.AuthTokenFilter.doFilterInternal(AuthTokenFilter.java:57)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)\\r\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)\\r\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)\\r\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)\\r\\n\\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)\\r\\n\\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)\\r\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\r\\n\\tat org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)\\r\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\r\\n\\tat org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)\\r\\n\\tat org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)\\r\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)\\r\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Cannot invoke \\\"com.spring.springshoppingcart.model.Cart.getUser()\\\" because \\\"cart\\\" is null\",\n    \"path\": \"/api/v1/orders/order\"\n}"
						},
						{
							"name": "testCreateOrderSuccess",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/orders/order?userId=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"order"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 18 May 2025 10:49:56 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Create order success!\",\n    \"data\": {\n        \"id\": 6,\n        \"orderDate\": \"2025-05-18\",\n        \"totalAmount\": 21000000,\n        \"orderStatus\": \"PENDING\",\n        \"createdAt\": \"2025-05-18T17:49:56.239+07:00\",\n        \"updatedAt\": \"2025-05-18T17:49:56.239+07:00\",\n        \"orderItems\": [\n            {\n                \"id\": 8,\n                \"quantity\": 1,\n                \"price\": 21000000,\n                \"createdAt\": \"2025-05-18T17:49:56.251+07:00\",\n                \"updatedAt\": \"2025-05-18T17:49:56.251+07:00\",\n                \"product\": {\n                    \"id\": 6,\n                    \"name\": \"Iphone 16 Pro\",\n                    \"brand\": \"Axioo\",\n                    \"price\": 21000000,\n                    \"inventory\": 10,\n                    \"description\": \"\",\n                    \"createdAt\": \"2025-05-18T16:44:44.904+07:00\",\n                    \"updatedAt\": \"2025-05-18T17:49:56.285+07:00\",\n                    \"category\": {\n                        \"id\": 2,\n                        \"name\": \"Smartphone\",\n                        \"createdAt\": \"2025-05-18T16:44:44.704+07:00\",\n                        \"updatedAt\": \"2025-05-18T16:44:44.704+07:00\"\n                    },\n                    \"images\": []\n                }\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Get Order by Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/orders/{order_id}/order",
							"host": [
								"{{host}}"
							],
							"path": [
								"orders",
								"{order_id}",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "testGetOrderByIdSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/orders/1/order",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"1",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 18 May 2025 10:37:03 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get order success!\",\n    \"data\": {\n        \"id\": 1,\n        \"userId\": 1,\n        \"orderDate\": null,\n        \"totalAmount\": 80000000,\n        \"status\": \"PENDING\",\n        \"items\": [\n            {\n                \"productId\": 4,\n                \"productName\": \"Samsung Galaxy S24 Ultra\",\n                \"quantity\": 1,\n                \"price\": 25000000\n            },\n            {\n                \"productId\": 3,\n                \"productName\": \"Axioo Pongo 760 v2\",\n                \"quantity\": 1,\n                \"price\": 15000000\n            },\n            {\n                \"productId\": 1,\n                \"productName\": \"Lenovo Legion 5\",\n                \"quantity\": 2,\n                \"price\": 20000000\n            }\n        ]\n    }\n}"
						},
						{
							"name": "testGetOrderByIdNotFound",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/orders/2/order",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"2",
										"order"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 18 May 2025 10:37:38 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Error Occured!\",\n    \"data\": \"Order not found!\"\n}"
						}
					]
				},
				{
					"name": "Get User Order",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/orders/order/{user_id}/user",
							"host": [
								"{{host}}"
							],
							"path": [
								"orders",
								"order",
								"{user_id}",
								"user"
							]
						}
					},
					"response": [
						{
							"name": "testGetUserOrderSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/orders/order/1/user",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"order",
										"1",
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 18 May 2025 10:37:58 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Get Order Success!\",\n    \"data\": [\n        {\n            \"id\": 1,\n            \"userId\": 1,\n            \"orderDate\": null,\n            \"totalAmount\": 80000000,\n            \"status\": \"PENDING\",\n            \"items\": [\n                {\n                    \"productId\": 1,\n                    \"productName\": \"Lenovo Legion 5\",\n                    \"quantity\": 2,\n                    \"price\": 20000000\n                },\n                {\n                    \"productId\": 4,\n                    \"productName\": \"Samsung Galaxy S24 Ultra\",\n                    \"quantity\": 1,\n                    \"price\": 25000000\n                },\n                {\n                    \"productId\": 3,\n                    \"productName\": \"Axioo Pongo 760 v2\",\n                    \"quantity\": 1,\n                    \"price\": 15000000\n                }\n            ]\n        }\n    ]\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearer-token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:8080/api/v1",
			"type": "string"
		},
		{
			"key": "bearer-token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbkBnbWFpbC5jb20iLCJpZCI6MSwicm9sZXMiOlsiUk9MRV9BRE1JTiJdLCJpYXQiOjE3NDc1NjUzMjIsImV4cCI6MTc0NzU2ODkyMn0.C57--eYFEatxfg9fz7CJzDEzhBF-dg7FFuTHIvmg1arxXwroxWB2XEuXxZM25CXBXs9ngdm1QNgLPlVKPt9qQg",
			"type": "string"
		}
	]
}